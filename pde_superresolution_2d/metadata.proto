// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
// Metadata for pde_superresolution datasets.

syntax = "proto3";

package pde_superresolution_2d;

// Stores information of states that are part of the dataset for parsing.
message State {
  string name = 1;

  enum TensorIndex {
    UNDEFINED = 0;
    X = 1;
    Y = 2;
    Z = 3;
  }
  // The (physical) tensor components that this state corresponds to, e.g., []
  // for a scalar value or [X] for the x-component of a vector.
  repeated TensorIndex tensor_indices = 7;

  // Derivative orders data.
  int32 deriv_x = 2;
  int32 deriv_y = 3;
  int32 deriv_t = 4;

  // Grid offset data. (integer number of half-steps)
  int32 offset_x = 5;
  int32 offset_y = 6;
}

// Stores information about discretization.
message Grid {
  int32 size_x = 1;
  int32 size_y = 2;
  // The length of a cell in arbitrary units.
  double step = 3;
}

// Stores one of the specific velocity fields. All implementations of the
// VelocityField must be included under oneof and create corresponding proto
// in the VelocityField.to_proto() method.
message VelocityField {
  oneof v_field {
    ConstantVelocityField constant_v_field = 1;
  }
}

// Stores all components of the random constant velocity field.
message ConstantVelocityField {
  repeated double amplitudes = 1;
  repeated int32 x_wavenumbers = 2;
  repeated int32 y_wavenumbers = 3;
  repeated double phase_shifts = 4;
}

// Stores one of the specific equations. All implementations of the
// Equation must be included under oneof and create corresponding proto
// in the Equation.to_proto() method. Any unset parameter should be interpreted
// as non-fixed (varying throughout the dataset).
message Equation {
  message Discretization {
    enum Method {
      UNDEFINED = 0;
      FINITE_DIFFERENCE = 1;
      FINITE_VOLUME = 2;
    }
    // Unique name of the discretization scheme.
    string name = 1;
    // Type of method.
    Method method = 2;
    // Is the method guaranteed monotonic? I.e., it should never new local
    // minima or maxima.
    bool monotonic = 3;
  }
  Discretization discretization = 1;

  oneof continuous_equation {
    AdvectionDiffusionEquation advection_diffusion = 2;
    AdvectionEquation advection = 3;
    SaintVenantEquation saint_venant = 4;
  }
}

// Equation parameters.
message AdvectionDiffusionEquation {
  double diffusion_coefficient = 1;
  double cfl_safety_factor = 2;
}
message AdvectionEquation {
  double cfl_safety_factor = 1;
}
message SaintVenantEquation {
  double cfl_safety_factor = 1;
  double max_water_depth = 2;
}

// Stores the spatial derivatives model used to generate data.
message Model {
  oneof model {
    FiniteDifferenceModel finite_difference = 1;
  }
}

// Stores parameters of FiniteDifference solver.
message FiniteDifferenceModel {
  int32 accuracy_order = 1;
}

// Stores all information about the dataset.
//
// Can be used to rebuild system components (grid, equation, solver).
// Provides information about initialization, integration and mean and variance
// of the primary input, produced by the dataset builder.
message Dataset {
  // Stores single state component. (e.g. concentration on a grid.)
  message DataComponent {
    Grid grid = 1;
    State state_key = 2;
    double mean = 3;
    double variance = 4;
  }

  repeated DataComponent components = 1;
  repeated string file_names = 2;

  // System components
  Equation equation = 3;
  Model model = 4;

  // Grid on which the solution is saved.
  Grid output_grid = 5;
  // Grid on which the solution was simulated.
  Grid simulation_grid = 6;

  // Initialization and integration parameters
  repeated float times = 7;
  int32 example_time_steps = 13;
  int32 initialization_seed_offset = 10;
  int32 num_seeds = 11;
  int32 num_shards = 12;
}
